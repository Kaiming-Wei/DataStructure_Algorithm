class Solution {
    public int[] countBits(int n) {
        if(n == 0){
            return new int[]{0};
        }
        int[] ans = new int[n+1];

        // find most one in the right solution
        // for(int i = 1; i <= n; i++){
        //     int tem = i;
        //     int one = mostRightOne(tem);
        //     if(one != 1){
        //         ans[i] = ans[i-one] + 1;
        //     }else{
        //         while(one == 1){
        //             tem -= one;
        //             one = mostRightOne(tem);
        //         }
        //         ans[i] = ans[tem] + 1;
        //     }
        // }


        // recursive dp solution
        dp(n, ans);
        return ans;
    }
    private void dp(int n, int[] dp){
        dp[0] = 0;
        dp[1] = 1;
        for(int i = 2; i < dp.length; i++){
            if(i % 2 == 0){
                dp[i] = dp[i/2];
            }else{
                dp[i] = dp[i/2] + 1;
            }
        }
    }
    private int mostRightOne(int a){
        return ((~a)+1 & a);
    }
}
