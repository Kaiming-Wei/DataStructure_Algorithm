class Solution {
    public int integerBreak(int n) {
        if(n <= 3){
            return n-1;
        }
        int[] dp = new int[n + 1];
        dpway(n, dp);
        return dp[n];
        // return process(n);
    }

    // recursive
    private int process(int n){
        if(n <= 3){
            return n;
        }
        int product = 0;
        for(int i = 1; i <= n / 2; i++){
            product = Math.max(product, process(i) * process(n - i));

        }
        return product;
    }

    // to dp
    private void dpway(int n, int[] dp){
        for(int i = 0; i <= 3; i++){
            dp[i] = i;
        }
        for(int len = 4; len <= n; len++){
            int product = 0;
            for(int i = 1; i <= len / 2; i++){
                product = Math.max(product, dp[i] * dp[len - i]);
            }
            dp[len] = product;
        }
    }
}
