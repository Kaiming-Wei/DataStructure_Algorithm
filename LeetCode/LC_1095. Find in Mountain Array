/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        // find max peak of the mountain, using binary
        int peek = findMax(mountainArr);
        int max = mountainArr.get(peek);
        if(target > max){
            return -1;
        }else if(target == max){
            return peek;
        }else{
            // if the target is less than peak
            int res = -1;
            // do binary at the leftside
            res = left_binary(mountainArr, 0, peek-1, target);
            // if not find at the leftside, binay rightsides
            if(res == -1){
                res = right_binary(mountainArr, peek + 1, mountainArr.length()-1, target);
            }
            return res;
        }
    }

    private int left_binary(MountainArray arr, int L, int R, int target){
        int M = L, res = -1;
        while(L <= R){
            M = L + ((R-L) >> 1);
            int cur = arr.get(M);
            if(cur == target){
                res = M;
                break;
            }else if(cur < target){
                L = M + 1;
            }else{
                R = M - 1;
            }
        }
        return res;
    }

    private int right_binary(MountainArray arr, int L, int R, int target){
        int M = L, res = -1;
        while(L <= R){
            M = L + ((R-L) >> 1);
            int cur = arr.get(M);
            if(cur == target){
                res = M;
                break;
            }else if(cur < target){
                R = M - 1;
            }else{
                L = M + 1;
            }
        }
        return res;
    }

    private int findMax(MountainArray arr){
        int len = arr.length();
        int L = 1, R = len - 2, M = 0, res = 0;
        while(L <= R){
            M = L + ((R-L) >> 1);
            
            int prev = arr.get(M - 1);
            int cur = arr.get(M);
            int next = arr.get(M + 1);
            if(cur > prev && cur > next){
                res = M;
                break;
            }
            if(prev < cur && next > cur){
                L = M + 1;
            }else{
                R = M - 1;
            }
        }
        return res;
    }
}
