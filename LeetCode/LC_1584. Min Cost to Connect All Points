class Solution {
    // Edge class, from and to are the point's ID
    private class Edge{
        int weight;
        int from;
        int to;
        public Edge(int weight, int from, int to){
            this.weight = weight;
            this.from = from;
            this.to = to;
        }
    }

    // UnionSet
    private class UnionSet{
        private class Node{
            int[] value;
            public Node(int[] p){
                value = p;
            }
        }
        private HashMap<Integer, Node> nodes;
        private HashMap<Node, Node> parents;
        private HashMap<Node, Integer> size;
        public UnionSet(int[][] points){
            nodes = new HashMap<>();
            parents = new HashMap<>();
            size = new HashMap<>();
            for(int i = 0; i < points.length; i++){
                Node n = new Node(points[i]);
                nodes.put(i, n);
                parents.put(n, n);
                size.put(n, 1);
            }
        }

        private Node findFather(Node n){
            Node cur = n;
            Queue<Node> q = new LinkedList<>();
            while(parents.get(cur) != cur){
                q.add(cur);
                cur = parents.get(cur);
            }
            while(!q.isEmpty()){
                Node node = q.poll();
                parents.put(node, cur);
            }
            return cur;

        }
        public boolean isSameSet(int a, int b){
            Node A = nodes.get(a);
            Node B = nodes.get(b);
            return findFather(A) == findFather(B);
        }

        // union 2 nodes by their ID
        public void union(int a, int b){
            Node A = nodes.get(a);
            Node B = nodes.get(b);
            Node aHead = findFather(A);
            Node bHead = findFather(B);
            int aSize = size.get(aHead);
            int bSize = size.get(bHead);
            if(aSize <= bSize){
                parents.put(aHead, bHead);
                size.put(bHead, aSize + bSize);
                size.remove(aHead);
            }else{
                parents.put(bHead, aHead);
                size.put(aHead, aSize + bSize);
                size.remove(bHead);
            }
        }
    }

    // heap Comparator
    public class EdgeComparator implements Comparator<Edge>{
        public int compare(Edge o1, Edge o2){
            return o1.weight - o2.weight;
        }
    }

    public int minCostConnectPoints(int[][] points) {
        UnionSet union = new UnionSet(points);
        PriorityQueue<Edge> heap = new PriorityQueue<>(new EdgeComparator());
        for(int i = 0; i < points.length; i++){
            for(int j = i + 1; j < points.length; j++){
                int distance = cal(points[i], points[j]);
                Edge edge = new Edge(distance, i, j);
                heap.add(edge);
            }
        }
        int ans = 0;
        while(!heap.isEmpty()){
            Edge edge = heap.poll();
            int from = edge.from;
            int to = edge.to;
            if(!union.isSameSet(from, to)){
                ans += edge.weight;
                union.union(from, to);
            }
        }
        return ans;
    }


    private int cal(int[] p1, int[] p2){
        return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);
    }
}
