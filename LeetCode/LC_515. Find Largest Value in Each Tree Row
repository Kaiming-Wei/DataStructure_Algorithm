/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /*
    Solution Ideas
        1. poll a node
        2. add left/right children
        3. update max
        4. check if is last Node of the current Level
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        Queue<TreeNode> q = new LinkedList<>();
        int max = Integer.MIN_VALUE, curLevelNode = 1, checkedNode = 0, nextLevelNode = 0;
        q.add(root);
        while(!q.isEmpty()){
            TreeNode cur = q.poll();
            if(cur.left != null){
                q.add(cur.left);
                nextLevelNode += 1;
            }
            if(cur.right != null){
                q.add(cur.right);
                nextLevelNode += 1;
            }
            max = Math.max(max, cur.val);
            checkedNode++;
            if(checkedNode == curLevelNode){
                res.add(max);
                checkedNode = 0;
                curLevelNode = nextLevelNode;
                nextLevelNode = 0;
                max = Integer.MIN_VALUE;
            }
        }
        return res;
        
    }
}
