class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        char[] c1 = s1.toCharArray();
        char[] c2 = s2.toCharArray();
        char[] c3 = s3.toCharArray();
        int p1 = 0, p2 = 0, p3 = 0;
        boolean[][] dp = new boolean[c1.length+1][c2.length+1];

        if(c1.length == 0 && c2.length == 0 && c3.length == 0){
            return true;
        }
        if(c1.length + c2.length != c3.length){
            return false;
        }
        if(c1.length == 0){
            return s2.equals(s3);
        }
        if(c2.length == 0){
            return s1.equals(s3);
        }
        dp(c1, c2, c3, dp);
        //System.out.println(check1(c1, c2, c3, p1, p2, p3));
        //System.out.println(check2(c1, c2, c3, p1, p2));
        //System.out.println(dp[0][0]);


        return dp[0][0];
    }

    // first recursive try, with 3 para
    private boolean check1(char[] c1, char[] c2, char[] c3, int p1, int p2, int p3){
        if(p3 == c3.length){
            return true;
        }
        if(p1 != c1.length && p2 != c2.length){
            if(c1[p1] == c3[p3] && c2[p2] == c3[p3]){
                return check1(c1, c2, c3, p1+1, p2, p3+1) || check1(c1, c2, c3, p1, p2+1, p3+1);
            }else if(c1[p1] == c3[p3]){
                return check1(c1, c2, c3, p1+1, p2, p3+1);
            }else if(c2[p2] == c3[p3]){
                return check1(c1, c2, c3, p1, p2+1, p3+1);
            }else{
                return false;
            }
        }else if(p1 == c1.length && p2 != c2.length){
            if(c2[p2] == c3[p3]){
                return check1(c1, c2, c3, p1, p2+1, p3+1);
            }else{
                return false;
            }
        }else{
            if(c1[p1] == c3[p3]){
                return check1(c1, c2, c3, p1+1, p2, p3+1);
            }else{
                return false;
            }
        }
    }


    // realize that can reduce one para
    private boolean check2(char[] c1, char[] c2, char[] c3, int p1, int p2){
        if(p1 + p2 == c3.length){
            return true;
        }
        if(p1 != c1.length && p2 != c2.length){
            if(c1[p1] == c3[p1 + p2] && c2[p2] == c3[p1 + p2]){
                return check2(c1, c2, c3, p1+1, p2) || check2(c1, c2, c3, p1, p2+1);
            }else if(c1[p1] == c3[p1 + p2]){
                return check2(c1, c2, c3, p1+1, p2);
            }else if(c2[p2] == c3[p1 + p2]){
                return check2(c1, c2, c3, p1, p2+1);
            }else{
                return false;
            }
        }else if(p1 == c1.length && p2 != c2.length){
            if(c2[p2] == c3[p1 + p2]){
                return check2(c1, c2, c3, p1, p2+1);
            }else{
                return false;
            }
        }else{
            if(c1[p1] == c3[p1 + p2]){
                return check2(c1, c2, c3, p1+1, p2);
            }else{
                return false;
            }
        }
    }

    // convert recursive to dp
    private void dp(char[] c1, char[] c2, char[] c3, boolean[][] dp){
        // for(int i = 0; i <= c3.length; i++){
        //     dp[i][c3.length - i] = true;
        // }
        //dp[c1.length-1][c2.length-1] = true;
        for(int p1 = c1.length; p1 >= 0; p1--){
            for(int p2 = c2.length; p2 >= 0; p2--){
                if(p1 == c1.length && p2 == c2.length){
                    dp[p1][p2] = true;
                }else if(p1 != c1.length && p2 != c2.length){
                    if(c1[p1] == c3[p1 + p2] && c2[p2] == c3[p1 + p2]){
                        dp[p1][p2] = dp[p1+1][p2] || dp[p1][p2+1];
                    }else if(c1[p1] == c3[p1 + p2]){
                        dp[p1][p2] = dp[p1+1][p2];
                    }else if(c2[p2] == c3[p1 + p2]){
                        dp[p1][p2] = dp[p1][p2+1];;
                    }else{
                        dp[p1][p2] = false;
                    }
                }else if(p1 == c1.length && p2 != c2.length){
                    if(c2[p2] == c3[p1 + p2]){
                        dp[p1][p2] = dp[p1][p2+1];;
                    }else{
                        dp[p1][p2] = false;
                    }
                }else{
                    if(c1[p1] == c3[p1 + p2]){
                        dp[p1][p2] = dp[p1+1][p2];
                    }else{
                        dp[p1][p2] = false;
                    }
                }
            }
        }

    }
}
