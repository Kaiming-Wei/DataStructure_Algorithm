import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class FindSum {

    // giving an integer array and a target number,
    // find if there are sum of two numbers = target
    // return the index

    // unsorted array
    // BF solution --> iteration
    public static int[] unsorted_sum1(int[] arr, int target){
        if(arr.length <= 1){
            return new int[]{-1};
        }
        for(int i = 0; i < arr.length; i++){
            for(int j = i + 1; j < arr.length; j++){
                if(arr[i] + arr[j] == target){
                    return new int[]{i, j};
                }
            }
        }
        return new int[]{-1};
    }


    // using HashMap solution
    // save each value into a map, if (target - current) is in the map

    public static int[] unsorted_sum2(int[] arr, int target){
        if(arr.length <= 1){
            return new int[]{-1};
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < arr.length; i++){
            int ans = target - arr[i];
            if(map.containsKey(ans)){
                return new int[]{i, map.get(ans)};
            }
            map.put(arr[i], i);
        }
        return new int[]{-1};
    }



    // for sorted array
    public static int[] sorted_sum1(int[] arr, int target){

        int left = 0,
                right = arr.length - 1;

        while (left < right){
            if(arr[left] + arr[right] == target){
                return new int[]{left, right};
            }else if(arr[left] + arr[right] < target){
                left++;
            }else{
                right--;
            }
        }
        return new int[]{-1};
    }


    // Binary Search
    public static int[] sorted_sum2(int[] arr, int target){

        for(int i = 0; i < arr.length; i++){
            int left = i, right = arr.length-1;
            while(left <= right){
                int mid = left + ((right - left) / 2);
                if(arr[mid] + arr[i] == target){
                    return new int[]{i, mid};
                }else if(arr[mid] + arr[i] < target){
                    left = mid + 1;
                }else{
                    right = mid - 1;
                }
            }
        }
        return new int[]{-1};
    }


    // test
    public static void main(String[] args) {
        int[] arr = new int[]{-1,1,2,3,9,5};
        System.out.println(Arrays.toString(unsorted_sum1(arr, 5)));
        System.out.println(Arrays.toString(unsorted_sum2(arr, 5)));

        System.out.println(Arrays.toString(sorted_sum1(arr, 5)));
        System.out.println(Arrays.toString(sorted_sum2(arr, 5)));
    }
}
